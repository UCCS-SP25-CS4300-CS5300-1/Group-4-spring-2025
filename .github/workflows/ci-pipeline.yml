name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  test-and-review:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install coverage
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            pip install openai
          fi

      - name: Run tests with coverage
        run: |
          cd myproject
          python -m coverage run --source='.' manage.py test
        env:
          DJANGO_DB_ENGINE: django.db.backends.sqlite3
          DJANGO_DB_NAME: ":memory:"
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Report coverage
        run: |
          cd myproject
          python -m coverage report
          python -m coverage xml
          python -m coverage html

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: myproject/htmlcov/

      - name: Custom AI Code Review
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          echo "Generating diff for PR #$PR_NUMBER"
          git fetch origin main
          DIFF=$(git diff origin/main..HEAD)

          if [ -z "$DIFF" ]; then
            echo "No changes to review"
            exit 0
          fi

          cat > review.py << EOF
          import os
          import json
          import requests
          import openai
          import sys
          import traceback

          def main():
              try:
                  pr_number = os.environ.get('PR_NUMBER')
                  repo = os.environ.get('REPO')
                  github_token = os.environ.get('GITHUB_TOKEN')
                  
                  if(not all([pr_number, repo, github_token])):
                      raise ValueError("Missing required environment variables: PR_NUMBER, REPO, or GITHUB_TOKEN")
                  
                  if(not os.environ.get('OPENAI_API_KEY')):
                      raise ValueError("Missing OpenAI API key")
                  
                  openai.api_key = os.environ.get('OPENAI_API_KEY')

                  try:
                      with open('diff.txt', 'r') as f:
                          diff = f.read()
                  except Exception as e:
                      raise IOError(f"Failed to read diff file: {str(e)}")

                  try:
                      response = openai.chat.completions.create(
                          model="gpt-4o-mini",
                          messages=[
                              {"role": "system", "content": "You are a helpful code reviewer. Review the following code diff and provide constructive feedback. Focus on bugs, security issues, performance problems, and maintainability concerns."},
                              {"role": "user", "content": f"Please review this code diff:\\n\\n{diff}"}
                          ],
                      )
                      review_comment = response.choices[0].message.content
                  except Exception as e:
                      raise RuntimeError(f"OpenAI API call failed: {type(e).__name__}")

                  url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
                  headers = {
                      "Authorization": f"token {github_token}",
                      "Accept": "application/vnd.github.v3+json"
                  }
                  data = {
                      "body": f"## AI Code Review\\n\\n{review_comment}"
                  }

                  try:
                      response = requests.post(url, headers=headers, data=json.dumps(data))
                      response.raise_for_status()
                      print("Review posted to PR")
                  except requests.exceptions.RequestException as e:
                      raise RuntimeError(f"Failed to post comment to GitHub: {type(e).__name__}")
                      
              except Exception as e:
                  print(f"Error: {type(e).__name__}: {str(e)}")
                  return 1
              
              return 0

          if(__name__ == "__main__"):
              sys.exit(main())
          EOF

          echo "$DIFF" > diff.txt
          python review.py
